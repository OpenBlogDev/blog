<?xml version="1.0" encoding="UTF-8"?>
<configuration  scan="true " scanPeriod="2 seconds" debug="true">
	<!-- 设置上下文名称 -->
	<contextName>blog-logging</contextName>
	<!--路径 -->
	<property name="logback.logs.path" value="./src/main/webapp/logs" />
	<!--appender 模块 -->
	<appender name="console" class="ch.qos.logback.core.ConsoleAppender" target="System.out">
		<layout charset="UTF-8">
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %contextName [%thread] %level %logger:%line %msg%n</pattern>
		</layout>
		 <!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，
		 所以我们使用下面的策略，可以避免输出 Error 的日志-->
         <filter class="ch.qos.logback.classic.filter.LevelFilter">
             <!--过滤 Error-->
             <level>ERROR</level>
             <!--匹配到就DENY禁止-->
             <onMatch>DENY</onMatch>
             <!--没有匹配到就ACCEPT允许-->
             <onMismatch>ACCEPT</onMismatch>
          </filter>
	</appender>
	<appender name="errconsole" class="ch.qos.logback.core.ConsoleAppender"
		target="System.err">
		<encoder charset="UTF-8">
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %contextName [%thread] %level %logger:%line %msg%n</pattern>
		</encoder>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!--过滤 Error-->
			<level>ERROR</level>
			<!--匹配到就ACCEPT允许-->
			<onMatch>ACCEPT</onMatch>
			 <!--没有匹配到就DENY禁止-->
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>
	<appender name="infofile" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则 如果同时有<File>和<FileNamePattern>，
		那么当天日志是<File>，明天会自动把今天的日志改名为今天的日期。即，<File> 的日志都是当天的。 -->
		<file>${logback.logs.path}/info.log</file>
		<!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
		 <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
			<FileNamePattern>${logback.logs.path}/info.%d{yyyyMMdd-HH}.log</FileNamePattern>
			<!--只保留最近90天的日志 -->
			<maxHistory>90</maxHistory>
			<!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志 -->
			<totalSizeCap>1GB</totalSizeCap>
		</rollingPolicy>
		<encoder charset="UTF-8">
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %contextName [%thread] %level %logger:%line %msg%n</pattern>
		</encoder>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>
	<appender name="debugfile" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则 如果同时有<File>和<FileNamePattern>，
		那么当天日志是<File>，明天会自动把今天的日志改名为今天的日期。即，<File> 的日志都是当天的。 -->
		<file>${logback.logs.path}/debug.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<FileNamePattern>${logback.logs.path}/debug.%d{yyyyMMdd-HH}.log</FileNamePattern>
			<!--只保留最近90天的日志 -->
			<maxHistory>90</maxHistory>
			<!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志 -->
			<totalSizeCap>1GB</totalSizeCap>
		</rollingPolicy>
		<encoder charset="UTF-8">
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %contextName [%thread] %level %logger:%line %msg%n</pattern>
		</encoder>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>
	<appender name="warnfile" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则 如果同时有<File>和<FileNamePattern>，
		那么当天日志是<File>，明天会自动把今天的日志改名为今天的日期。即，<File> 的日志都是当天的。 -->
		<file>${logback.logs.path}/warn.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<FileNamePattern>${logback.logs.path}/warn.%d{yyyyMMdd-HH}.log</FileNamePattern>
			<!--只保留最近90天的日志 -->
			<maxHistory>90</maxHistory>
			<!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志 -->
			<totalSizeCap>1GB</totalSizeCap>
		</rollingPolicy>
		<encoder charset="UTF-8">
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %contextName [%thread] %level %logger:%line %msg%n</pattern>
		</encoder>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>WARN</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>
	 <appender name="errfile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logback.logs.path}/error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${logback.logs.path}/error.%d{yyyyMMdd}.log</FileNamePattern>
        </rollingPolicy>
        <encoder charset="UTF-8">
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %contextName [%thread] %level %logger:%line %msg%n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <logger name="org.springframework" level="WARN"/>
    <logger name="druid" level="ERROR"/>
    <!-- <logger name="org.hibernate" level="ERROR"/>
    <logger name="springfox" level="WARN"/>
    <logger name="org.apache.catalina" level="OFF"/>

    <logger name="com.appengine" level="DEBUG"/> -->
	<!--指定最基础的日志输出级别-->
	 <springProfile name="dev,test">
        <root level="INFO">
            <appender-ref ref="console"/>
           <appender-ref ref="errconsole"/>
        </root>
    </springProfile>
    <springProfile name="pro">
        <root level="INFO">
             <appender-ref ref="console"/>
        	 <appender-ref ref="errconsole"/>
       	 	 <appender-ref ref="debugfile"/>
        	 <appender-ref ref="infofile"/>
        	 <appender-ref ref="warnfile"/>
        	 <appender-ref ref="errfile"/>
        </root>
    </springProfile>
</configuration>